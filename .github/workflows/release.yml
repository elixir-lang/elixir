name: Release

on:
  push:
    branches:
      - main
      - v*.*
    tags:
      - v*

env:
  ELIXIR_OPTS: "--warnings-as-errors"
  ERLC_OPTS: "warnings_as_errors"
  LANG: C.UTF-8

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  create_draft_release:
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Create draft release
        if: github.ref_type != 'branch'
        run: |
          gh release create \
            --repo ${{ github.repository }} \
            --title ${{ github.ref_name }} \
            --notes '' \
            --draft \
            ${{ github.ref_name }}

      - uses: actions/checkout@v4
        if: github.ref_type == 'branch'
        with:
          fetch-depth: 50

      - name: Update ${{ github.ref_name }}-latest
        if: github.ref_type == 'branch'
        run: |
          ref_name=${{ github.ref_name }}-latest

          if ! gh release view $ref_name; then
            gh release create \
              --latest=false \
              --title $ref_name \
              --notes "Automated release for latest ${{ github.ref_name }}." \
              $ref_name
          fi

          git tag $ref_name --force
          git push origin $ref_name --force

  build:
    needs: create_draft_release
    strategy:
      fail-fast: true
      matrix:
        include:
          - otp: 25
            otp_version: "25.3"
          - otp: 26
            otp_version: "26.0"
          - otp: 27
            otp_version: "27.0"
            build_docs: build_docs
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 50

      - uses: ./.github/workflows/release_pre_built
        with:
          otp_version: ${{ matrix.otp_version }}
          otp: ${{ matrix.otp }}
          build_docs: ${{ matrix.build_docs }}

      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'elixir-otp-${{ matrix.otp }}.*'

      - uses: actions/attest-build-provenance@v1
        if: ${{ matrix.build_docs }}
        with:
          subject-path: 'Docs.*'

      - uses: actions/upload-artifact@v4
        with:
          name: elixir-otp-${{ matrix.otp }}
          path: elixir-otp-${{ matrix.otp }}*

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.build_docs }}
        with:
          name: Docs
          path: Docs.zip*

  upload-release:
    needs: build
    runs-on: windows-2022

    steps:
      - uses: actions/download-artifact@v4

      - run: |
          mv elixir-otp-*/* .
          mv Docs/* .
        shell: bash

      - name: "Sign files with Trusted Signing"
        if: github.repository == 'elixir-lang/elixir'
        uses: azure/trusted-signing-action@v0.4.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: trusted-signing-elixir
          certificate-profile-name: Elixir
          files-folder: ${{ github.workspace }}
          files-folder-filter: exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Upload Pre-built
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.ref_type }}" == "branch" ]; then
            tag=${{ github.ref_name }}-latest
          else
            tag="${{ github.ref_name }}"
          fi

          gh release upload \
            --repo ${{ github.repository }} \
            --clobber \
            "$tag" \
            elixir-otp-*.zip \
            elixir-otp-*.zip.sha{1,256}sum \
            elixir-otp-*.exe \
            elixir-otp-*.exe.sha{1,256}sum \
            Docs.zip \
            Docs.zip.sha{1,256}sum

  upload-builds-hex-pm:
    needs: build
    runs-on: ubuntu-22.04
    concurrency: builds-hex-pm
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.HEX_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.HEX_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.HEX_AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.HEX_AWS_S3_BUCKET }}
      FASTLY_REPO_SERVICE_ID: ${{ secrets.HEX_FASTLY_REPO_SERVICE_ID }}
      FASTLY_BUILDS_SERVICE_ID: ${{ secrets.HEX_FASTLY_BUILDS_SERVICE_ID }}
      FASTLY_KEY: ${{ secrets.HEX_FASTLY_KEY }}
      OTP_GENERIC_VERSION: '25'
    steps:
      - uses: actions/download-artifact@v4

      - name: Utils.sh
        run: |
          cat << 'EOF' > utils.sh
          function purge_key() {
            #curl \
            #    -X POST \
            #    -H "Fastly-Key: ${FASTLY_KEY}" \
            #    -H "Accept: application/json" \
            #    -H "Content-Length: 0" \
            #    "https://api.fastly.com/service/$1/purge/$2"
            echo 'Temporary close'
          }
          function purge() {
            purge_key ${FASTLY_REPO_SERVICE_ID} $1
            purge_key ${FASTLY_BUILDS_SERVICE_ID} $1
            sleep 2
            purge_key ${FASTLY_REPO_SERVICE_ID} $1
            purge_key ${FASTLY_BUILDS_SERVICE_ID} $1
            sleep 2
            purge_key ${FASTLY_REPO_SERVICE_ID} $1
            purge_key ${FASTLY_BUILDS_SERVICE_ID} $1
          }
          EOF
      - name: Upload Precompiled to S3
        run: |
          source utils.sh

          mv elixir-otp-*/* .
          for zip in $(find . -type f -name 'elixir-otp-*.zip' | sed 's/^\.\///'); do
            echo $zip
            dest=$(echo $zip | sed 's/^elixir/${{ github.ref_name }}/')
            surrogate_key=$(echo $dest | sed 's/\.zip$//')

            aws s3 cp "${zip}" "s3://${AWS_S3_BUCKET}/builds/elixir/${dest}" \
              --cache-control "public,max-age=3600" \
              --metadata "{\"surrogate-key\":\"builds builds/elixir builds/elixir/${surrogate_key}\",\"surrogate-control\":\"public,max-age=604800\"}"

            if [ $zip == "elixir-otp-${OTP_GENERIC_VERSION}.zip" ]; then
              aws s3 cp "${zip}" "s3://${AWS_S3_BUCKET}/builds/elixir/${{ github.ref_name }}.zip" \
                --cache-control "public,max-age=3600" \
                --metadata "{\"surrogate-key\":\"builds builds/elixir builds/elixir/${{ github.ref_name }}\",\"surrogate-control\":\"public,max-age=604800\"}"
              purge builds/elixir/${{ github.ref_name }}
            fi
          done
      - name: Upload Docs to S3
        working-directory: Docs
        run: |
          source ../utils.sh
          version=$(echo ${{ github.ref_name }} | sed -e 's/^v//g')

          unzip Docs.zip

          for f in doc/*; do
            if [ -d "$f" ]; then
              app=$(echo $f | sed s/"doc\/"//)
              tarball="${app}-${version}.tar.gz"
              surrogate_key="docs/${app}-${version}"
              tar -czf "${tarball}" -C "doc/${app}" .
              aws s3 cp "${tarball}" "s3://${AWS_S3_BUCKET}/docs/${tarball}" \
                --cache-control "public,max-age=3600" \
                --metadata "{\"surrogate-key\":\"${surrogate_key}\",\"surrogate-control\":\"public,max-age=604800\"}"
              purge "${surrogate_key}"
            fi
          done

      - name: Update builds txt
        run: |
          source utils.sh
          sha256_files=$(find . -name elixir-otp-*.sha256sum)
          date=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          ref_name=${{ github.ref_name }}

          aws s3 cp s3://${AWS_S3_BUCKET}/builds/elixir/builds.txt builds.txt || true
          touch builds.txt

          for sha256_file in sha256_files; do
            otp_version=$(echo ${sha256_file} | sed -r 's/elixir-otp-([[:digit:]]+)\.sha256sum/otp-\1/')
            build_sha256=$(cat ${sha256_file} | cut -d ' ' -f 1)

            sed -i "/^${ref_name}-${otp_version} /d" builds.txt
            echo -e "${ref_name}-${otp_version} ${{ github.sha }} ${date} ${build_sha256} \n$(cat builds.txt)" > builds.txt

            if [ "${otp_version}" == "${OTP_GENERIC_VERSION}" ]; then
              sed -i "/^${ref_name} /d" builds.txt
              echo -e "${ref_name} ${{ github.sha }} ${date} ${build_sha256} \n$(cat builds.txt)" > builds.txt
            fi
          done

          sort -u -k1,1 -o builds.txt builds.txt
          aws s3 cp builds.txt s3://${AWS_S3_BUCKET}/builds/elixir/builds.txt \
            --cache-control "public,max-age=3600" \
            --metadata '{"surrogate-key":"builds builds/elixir builds/elixir/txt","surrogate-control":"public,max-age=604800"}'
          purge builds/elixir/txt
